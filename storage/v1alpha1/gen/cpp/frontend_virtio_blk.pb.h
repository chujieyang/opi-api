// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frontend_virtio_blk.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frontend_5fvirtio_5fblk_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frontend_5fvirtio_5fblk_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "opicommon.pb.h"
#include "google/api/client.pb.h"
#include "google/api/resource.pb.h"
#include <google/protobuf/empty.pb.h>
#include "google/api/annotations.pb.h"
#include "google/api/field_behavior.pb.h"
#include <google/protobuf/field_mask.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frontend_5fvirtio_5fblk_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frontend_5fvirtio_5fblk_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frontend_5fvirtio_5fblk_2eproto;
namespace opi_api {
namespace storage {
namespace v1 {
class CreateVirtioBlkRequest;
struct CreateVirtioBlkRequestDefaultTypeInternal;
extern CreateVirtioBlkRequestDefaultTypeInternal _CreateVirtioBlkRequest_default_instance_;
class DeleteVirtioBlkRequest;
struct DeleteVirtioBlkRequestDefaultTypeInternal;
extern DeleteVirtioBlkRequestDefaultTypeInternal _DeleteVirtioBlkRequest_default_instance_;
class GetVirtioBlkRequest;
struct GetVirtioBlkRequestDefaultTypeInternal;
extern GetVirtioBlkRequestDefaultTypeInternal _GetVirtioBlkRequest_default_instance_;
class ListVirtioBlksRequest;
struct ListVirtioBlksRequestDefaultTypeInternal;
extern ListVirtioBlksRequestDefaultTypeInternal _ListVirtioBlksRequest_default_instance_;
class ListVirtioBlksResponse;
struct ListVirtioBlksResponseDefaultTypeInternal;
extern ListVirtioBlksResponseDefaultTypeInternal _ListVirtioBlksResponse_default_instance_;
class StatsVirtioBlkRequest;
struct StatsVirtioBlkRequestDefaultTypeInternal;
extern StatsVirtioBlkRequestDefaultTypeInternal _StatsVirtioBlkRequest_default_instance_;
class StatsVirtioBlkResponse;
struct StatsVirtioBlkResponseDefaultTypeInternal;
extern StatsVirtioBlkResponseDefaultTypeInternal _StatsVirtioBlkResponse_default_instance_;
class UpdateVirtioBlkRequest;
struct UpdateVirtioBlkRequestDefaultTypeInternal;
extern UpdateVirtioBlkRequestDefaultTypeInternal _UpdateVirtioBlkRequest_default_instance_;
class VirtioBlk;
struct VirtioBlkDefaultTypeInternal;
extern VirtioBlkDefaultTypeInternal _VirtioBlk_default_instance_;
}  // namespace v1
}  // namespace storage
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> ::opi_api::storage::v1::CreateVirtioBlkRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::CreateVirtioBlkRequest>(Arena*);
template<> ::opi_api::storage::v1::DeleteVirtioBlkRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::DeleteVirtioBlkRequest>(Arena*);
template<> ::opi_api::storage::v1::GetVirtioBlkRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::GetVirtioBlkRequest>(Arena*);
template<> ::opi_api::storage::v1::ListVirtioBlksRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::ListVirtioBlksRequest>(Arena*);
template<> ::opi_api::storage::v1::ListVirtioBlksResponse* Arena::CreateMaybeMessage<::opi_api::storage::v1::ListVirtioBlksResponse>(Arena*);
template<> ::opi_api::storage::v1::StatsVirtioBlkRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::StatsVirtioBlkRequest>(Arena*);
template<> ::opi_api::storage::v1::StatsVirtioBlkResponse* Arena::CreateMaybeMessage<::opi_api::storage::v1::StatsVirtioBlkResponse>(Arena*);
template<> ::opi_api::storage::v1::UpdateVirtioBlkRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::UpdateVirtioBlkRequest>(Arena*);
template<> ::opi_api::storage::v1::VirtioBlk* Arena::CreateMaybeMessage<::opi_api::storage::v1::VirtioBlk>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace opi_api {
namespace storage {
namespace v1 {

// ===================================================================

class VirtioBlk final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.VirtioBlk) */ {
 public:
  inline VirtioBlk() : VirtioBlk(nullptr) {}
  ~VirtioBlk() override;
  explicit PROTOBUF_CONSTEXPR VirtioBlk(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VirtioBlk(const VirtioBlk& from);
  VirtioBlk(VirtioBlk&& from) noexcept
    : VirtioBlk() {
    *this = ::std::move(from);
  }

  inline VirtioBlk& operator=(const VirtioBlk& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtioBlk& operator=(VirtioBlk&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtioBlk& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtioBlk* internal_default_instance() {
    return reinterpret_cast<const VirtioBlk*>(
               &_VirtioBlk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VirtioBlk& a, VirtioBlk& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtioBlk* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtioBlk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtioBlk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtioBlk>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VirtioBlk& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VirtioBlk& from) {
    VirtioBlk::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VirtioBlk* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.VirtioBlk";
  }
  protected:
  explicit VirtioBlk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kVolumeNameRefFieldNumber = 3,
    kPcieIdFieldNumber = 2,
    kMinLimitFieldNumber = 5,
    kMaxLimitFieldNumber = 6,
    kMaxIoQpsFieldNumber = 4,
  };
  // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY, (.google.api.field_behavior) = IMMUTABLE, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string volume_name_ref = 3 [(.google.api.field_behavior) = REQUIRED];
  void clear_volume_name_ref();
  const std::string& volume_name_ref() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_volume_name_ref(ArgT0&& arg0, ArgT... args);
  std::string* mutable_volume_name_ref();
  PROTOBUF_NODISCARD std::string* release_volume_name_ref();
  void set_allocated_volume_name_ref(std::string* volume_name_ref);
  private:
  const std::string& _internal_volume_name_ref() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_volume_name_ref(const std::string& value);
  std::string* _internal_mutable_volume_name_ref();
  public:

  // .opi_api.storage.v1.PciEndpoint pcie_id = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_pcie_id() const;
  private:
  bool _internal_has_pcie_id() const;
  public:
  void clear_pcie_id();
  const ::opi_api::storage::v1::PciEndpoint& pcie_id() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::PciEndpoint* release_pcie_id();
  ::opi_api::storage::v1::PciEndpoint* mutable_pcie_id();
  void set_allocated_pcie_id(::opi_api::storage::v1::PciEndpoint* pcie_id);
  private:
  const ::opi_api::storage::v1::PciEndpoint& _internal_pcie_id() const;
  ::opi_api::storage::v1::PciEndpoint* _internal_mutable_pcie_id();
  public:
  void unsafe_arena_set_allocated_pcie_id(
      ::opi_api::storage::v1::PciEndpoint* pcie_id);
  ::opi_api::storage::v1::PciEndpoint* unsafe_arena_release_pcie_id();

  // .opi_api.storage.v1.QosLimit min_limit = 5 [(.google.api.field_behavior) = OPTIONAL];
  bool has_min_limit() const;
  private:
  bool _internal_has_min_limit() const;
  public:
  void clear_min_limit();
  const ::opi_api::storage::v1::QosLimit& min_limit() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::QosLimit* release_min_limit();
  ::opi_api::storage::v1::QosLimit* mutable_min_limit();
  void set_allocated_min_limit(::opi_api::storage::v1::QosLimit* min_limit);
  private:
  const ::opi_api::storage::v1::QosLimit& _internal_min_limit() const;
  ::opi_api::storage::v1::QosLimit* _internal_mutable_min_limit();
  public:
  void unsafe_arena_set_allocated_min_limit(
      ::opi_api::storage::v1::QosLimit* min_limit);
  ::opi_api::storage::v1::QosLimit* unsafe_arena_release_min_limit();

  // .opi_api.storage.v1.QosLimit max_limit = 6 [(.google.api.field_behavior) = OPTIONAL];
  bool has_max_limit() const;
  private:
  bool _internal_has_max_limit() const;
  public:
  void clear_max_limit();
  const ::opi_api::storage::v1::QosLimit& max_limit() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::QosLimit* release_max_limit();
  ::opi_api::storage::v1::QosLimit* mutable_max_limit();
  void set_allocated_max_limit(::opi_api::storage::v1::QosLimit* max_limit);
  private:
  const ::opi_api::storage::v1::QosLimit& _internal_max_limit() const;
  ::opi_api::storage::v1::QosLimit* _internal_mutable_max_limit();
  public:
  void unsafe_arena_set_allocated_max_limit(
      ::opi_api::storage::v1::QosLimit* max_limit);
  ::opi_api::storage::v1::QosLimit* unsafe_arena_release_max_limit();

  // int64 max_io_qps = 4 [(.google.api.field_behavior) = OPTIONAL];
  void clear_max_io_qps();
  int64_t max_io_qps() const;
  void set_max_io_qps(int64_t value);
  private:
  int64_t _internal_max_io_qps() const;
  void _internal_set_max_io_qps(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.VirtioBlk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr volume_name_ref_;
    ::opi_api::storage::v1::PciEndpoint* pcie_id_;
    ::opi_api::storage::v1::QosLimit* min_limit_;
    ::opi_api::storage::v1::QosLimit* max_limit_;
    int64_t max_io_qps_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_frontend_5fvirtio_5fblk_2eproto;
};
// -------------------------------------------------------------------

class CreateVirtioBlkRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.CreateVirtioBlkRequest) */ {
 public:
  inline CreateVirtioBlkRequest() : CreateVirtioBlkRequest(nullptr) {}
  ~CreateVirtioBlkRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateVirtioBlkRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateVirtioBlkRequest(const CreateVirtioBlkRequest& from);
  CreateVirtioBlkRequest(CreateVirtioBlkRequest&& from) noexcept
    : CreateVirtioBlkRequest() {
    *this = ::std::move(from);
  }

  inline CreateVirtioBlkRequest& operator=(const CreateVirtioBlkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateVirtioBlkRequest& operator=(CreateVirtioBlkRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateVirtioBlkRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateVirtioBlkRequest* internal_default_instance() {
    return reinterpret_cast<const CreateVirtioBlkRequest*>(
               &_CreateVirtioBlkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateVirtioBlkRequest& a, CreateVirtioBlkRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateVirtioBlkRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateVirtioBlkRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateVirtioBlkRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateVirtioBlkRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateVirtioBlkRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateVirtioBlkRequest& from) {
    CreateVirtioBlkRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateVirtioBlkRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.CreateVirtioBlkRequest";
  }
  protected:
  explicit CreateVirtioBlkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVirtioBlkIdFieldNumber = 2,
    kVirtioBlkFieldNumber = 1,
  };
  // string virtio_blk_id = 2 [(.google.api.field_behavior) = OPTIONAL];
  void clear_virtio_blk_id();
  const std::string& virtio_blk_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_virtio_blk_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_virtio_blk_id();
  PROTOBUF_NODISCARD std::string* release_virtio_blk_id();
  void set_allocated_virtio_blk_id(std::string* virtio_blk_id);
  private:
  const std::string& _internal_virtio_blk_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_virtio_blk_id(const std::string& value);
  std::string* _internal_mutable_virtio_blk_id();
  public:

  // .opi_api.storage.v1.VirtioBlk virtio_blk = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_virtio_blk() const;
  private:
  bool _internal_has_virtio_blk() const;
  public:
  void clear_virtio_blk();
  const ::opi_api::storage::v1::VirtioBlk& virtio_blk() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::VirtioBlk* release_virtio_blk();
  ::opi_api::storage::v1::VirtioBlk* mutable_virtio_blk();
  void set_allocated_virtio_blk(::opi_api::storage::v1::VirtioBlk* virtio_blk);
  private:
  const ::opi_api::storage::v1::VirtioBlk& _internal_virtio_blk() const;
  ::opi_api::storage::v1::VirtioBlk* _internal_mutable_virtio_blk();
  public:
  void unsafe_arena_set_allocated_virtio_blk(
      ::opi_api::storage::v1::VirtioBlk* virtio_blk);
  ::opi_api::storage::v1::VirtioBlk* unsafe_arena_release_virtio_blk();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.CreateVirtioBlkRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr virtio_blk_id_;
    ::opi_api::storage::v1::VirtioBlk* virtio_blk_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_frontend_5fvirtio_5fblk_2eproto;
};
// -------------------------------------------------------------------

class DeleteVirtioBlkRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.DeleteVirtioBlkRequest) */ {
 public:
  inline DeleteVirtioBlkRequest() : DeleteVirtioBlkRequest(nullptr) {}
  ~DeleteVirtioBlkRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteVirtioBlkRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteVirtioBlkRequest(const DeleteVirtioBlkRequest& from);
  DeleteVirtioBlkRequest(DeleteVirtioBlkRequest&& from) noexcept
    : DeleteVirtioBlkRequest() {
    *this = ::std::move(from);
  }

  inline DeleteVirtioBlkRequest& operator=(const DeleteVirtioBlkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteVirtioBlkRequest& operator=(DeleteVirtioBlkRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteVirtioBlkRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteVirtioBlkRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteVirtioBlkRequest*>(
               &_DeleteVirtioBlkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DeleteVirtioBlkRequest& a, DeleteVirtioBlkRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteVirtioBlkRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteVirtioBlkRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteVirtioBlkRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteVirtioBlkRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteVirtioBlkRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteVirtioBlkRequest& from) {
    DeleteVirtioBlkRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteVirtioBlkRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.DeleteVirtioBlkRequest";
  }
  protected:
  explicit DeleteVirtioBlkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAllowMissingFieldNumber = 2,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool allow_missing = 2 [(.google.api.field_behavior) = OPTIONAL];
  void clear_allow_missing();
  bool allow_missing() const;
  void set_allow_missing(bool value);
  private:
  bool _internal_allow_missing() const;
  void _internal_set_allow_missing(bool value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.DeleteVirtioBlkRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    bool allow_missing_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_frontend_5fvirtio_5fblk_2eproto;
};
// -------------------------------------------------------------------

class UpdateVirtioBlkRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.UpdateVirtioBlkRequest) */ {
 public:
  inline UpdateVirtioBlkRequest() : UpdateVirtioBlkRequest(nullptr) {}
  ~UpdateVirtioBlkRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateVirtioBlkRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateVirtioBlkRequest(const UpdateVirtioBlkRequest& from);
  UpdateVirtioBlkRequest(UpdateVirtioBlkRequest&& from) noexcept
    : UpdateVirtioBlkRequest() {
    *this = ::std::move(from);
  }

  inline UpdateVirtioBlkRequest& operator=(const UpdateVirtioBlkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateVirtioBlkRequest& operator=(UpdateVirtioBlkRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateVirtioBlkRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateVirtioBlkRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateVirtioBlkRequest*>(
               &_UpdateVirtioBlkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UpdateVirtioBlkRequest& a, UpdateVirtioBlkRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateVirtioBlkRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateVirtioBlkRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateVirtioBlkRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateVirtioBlkRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateVirtioBlkRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateVirtioBlkRequest& from) {
    UpdateVirtioBlkRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateVirtioBlkRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.UpdateVirtioBlkRequest";
  }
  protected:
  explicit UpdateVirtioBlkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVirtioBlkFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
    kAllowMissingFieldNumber = 3,
  };
  // .opi_api.storage.v1.VirtioBlk virtio_blk = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_virtio_blk() const;
  private:
  bool _internal_has_virtio_blk() const;
  public:
  void clear_virtio_blk();
  const ::opi_api::storage::v1::VirtioBlk& virtio_blk() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::VirtioBlk* release_virtio_blk();
  ::opi_api::storage::v1::VirtioBlk* mutable_virtio_blk();
  void set_allocated_virtio_blk(::opi_api::storage::v1::VirtioBlk* virtio_blk);
  private:
  const ::opi_api::storage::v1::VirtioBlk& _internal_virtio_blk() const;
  ::opi_api::storage::v1::VirtioBlk* _internal_mutable_virtio_blk();
  public:
  void unsafe_arena_set_allocated_virtio_blk(
      ::opi_api::storage::v1::VirtioBlk* virtio_blk);
  ::opi_api::storage::v1::VirtioBlk* unsafe_arena_release_virtio_blk();

  // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = OPTIONAL];
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // bool allow_missing = 3 [(.google.api.field_behavior) = OPTIONAL];
  void clear_allow_missing();
  bool allow_missing() const;
  void set_allow_missing(bool value);
  private:
  bool _internal_allow_missing() const;
  void _internal_set_allow_missing(bool value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.UpdateVirtioBlkRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::opi_api::storage::v1::VirtioBlk* virtio_blk_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
    bool allow_missing_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_frontend_5fvirtio_5fblk_2eproto;
};
// -------------------------------------------------------------------

class ListVirtioBlksRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.ListVirtioBlksRequest) */ {
 public:
  inline ListVirtioBlksRequest() : ListVirtioBlksRequest(nullptr) {}
  ~ListVirtioBlksRequest() override;
  explicit PROTOBUF_CONSTEXPR ListVirtioBlksRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListVirtioBlksRequest(const ListVirtioBlksRequest& from);
  ListVirtioBlksRequest(ListVirtioBlksRequest&& from) noexcept
    : ListVirtioBlksRequest() {
    *this = ::std::move(from);
  }

  inline ListVirtioBlksRequest& operator=(const ListVirtioBlksRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListVirtioBlksRequest& operator=(ListVirtioBlksRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListVirtioBlksRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListVirtioBlksRequest* internal_default_instance() {
    return reinterpret_cast<const ListVirtioBlksRequest*>(
               &_ListVirtioBlksRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ListVirtioBlksRequest& a, ListVirtioBlksRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListVirtioBlksRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListVirtioBlksRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListVirtioBlksRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListVirtioBlksRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListVirtioBlksRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListVirtioBlksRequest& from) {
    ListVirtioBlksRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListVirtioBlksRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.ListVirtioBlksRequest";
  }
  protected:
  explicit ListVirtioBlksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3 [(.google.api.field_behavior) = OPTIONAL];
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2 [(.google.api.field_behavior) = OPTIONAL];
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.ListVirtioBlksRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    int32_t page_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_frontend_5fvirtio_5fblk_2eproto;
};
// -------------------------------------------------------------------

class ListVirtioBlksResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.ListVirtioBlksResponse) */ {
 public:
  inline ListVirtioBlksResponse() : ListVirtioBlksResponse(nullptr) {}
  ~ListVirtioBlksResponse() override;
  explicit PROTOBUF_CONSTEXPR ListVirtioBlksResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListVirtioBlksResponse(const ListVirtioBlksResponse& from);
  ListVirtioBlksResponse(ListVirtioBlksResponse&& from) noexcept
    : ListVirtioBlksResponse() {
    *this = ::std::move(from);
  }

  inline ListVirtioBlksResponse& operator=(const ListVirtioBlksResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListVirtioBlksResponse& operator=(ListVirtioBlksResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListVirtioBlksResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListVirtioBlksResponse* internal_default_instance() {
    return reinterpret_cast<const ListVirtioBlksResponse*>(
               &_ListVirtioBlksResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ListVirtioBlksResponse& a, ListVirtioBlksResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListVirtioBlksResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListVirtioBlksResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListVirtioBlksResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListVirtioBlksResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListVirtioBlksResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListVirtioBlksResponse& from) {
    ListVirtioBlksResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListVirtioBlksResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.ListVirtioBlksResponse";
  }
  protected:
  explicit ListVirtioBlksResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVirtioBlksFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .opi_api.storage.v1.VirtioBlk virtio_blks = 1;
  int virtio_blks_size() const;
  private:
  int _internal_virtio_blks_size() const;
  public:
  void clear_virtio_blks();
  ::opi_api::storage::v1::VirtioBlk* mutable_virtio_blks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::VirtioBlk >*
      mutable_virtio_blks();
  private:
  const ::opi_api::storage::v1::VirtioBlk& _internal_virtio_blks(int index) const;
  ::opi_api::storage::v1::VirtioBlk* _internal_add_virtio_blks();
  public:
  const ::opi_api::storage::v1::VirtioBlk& virtio_blks(int index) const;
  ::opi_api::storage::v1::VirtioBlk* add_virtio_blks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::VirtioBlk >&
      virtio_blks() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.ListVirtioBlksResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::VirtioBlk > virtio_blks_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_frontend_5fvirtio_5fblk_2eproto;
};
// -------------------------------------------------------------------

class GetVirtioBlkRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.GetVirtioBlkRequest) */ {
 public:
  inline GetVirtioBlkRequest() : GetVirtioBlkRequest(nullptr) {}
  ~GetVirtioBlkRequest() override;
  explicit PROTOBUF_CONSTEXPR GetVirtioBlkRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetVirtioBlkRequest(const GetVirtioBlkRequest& from);
  GetVirtioBlkRequest(GetVirtioBlkRequest&& from) noexcept
    : GetVirtioBlkRequest() {
    *this = ::std::move(from);
  }

  inline GetVirtioBlkRequest& operator=(const GetVirtioBlkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVirtioBlkRequest& operator=(GetVirtioBlkRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetVirtioBlkRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetVirtioBlkRequest* internal_default_instance() {
    return reinterpret_cast<const GetVirtioBlkRequest*>(
               &_GetVirtioBlkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetVirtioBlkRequest& a, GetVirtioBlkRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVirtioBlkRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVirtioBlkRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetVirtioBlkRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetVirtioBlkRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetVirtioBlkRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetVirtioBlkRequest& from) {
    GetVirtioBlkRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVirtioBlkRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.GetVirtioBlkRequest";
  }
  protected:
  explicit GetVirtioBlkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.GetVirtioBlkRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_frontend_5fvirtio_5fblk_2eproto;
};
// -------------------------------------------------------------------

class StatsVirtioBlkRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.StatsVirtioBlkRequest) */ {
 public:
  inline StatsVirtioBlkRequest() : StatsVirtioBlkRequest(nullptr) {}
  ~StatsVirtioBlkRequest() override;
  explicit PROTOBUF_CONSTEXPR StatsVirtioBlkRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatsVirtioBlkRequest(const StatsVirtioBlkRequest& from);
  StatsVirtioBlkRequest(StatsVirtioBlkRequest&& from) noexcept
    : StatsVirtioBlkRequest() {
    *this = ::std::move(from);
  }

  inline StatsVirtioBlkRequest& operator=(const StatsVirtioBlkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatsVirtioBlkRequest& operator=(StatsVirtioBlkRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatsVirtioBlkRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatsVirtioBlkRequest* internal_default_instance() {
    return reinterpret_cast<const StatsVirtioBlkRequest*>(
               &_StatsVirtioBlkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(StatsVirtioBlkRequest& a, StatsVirtioBlkRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StatsVirtioBlkRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatsVirtioBlkRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatsVirtioBlkRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StatsVirtioBlkRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StatsVirtioBlkRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StatsVirtioBlkRequest& from) {
    StatsVirtioBlkRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatsVirtioBlkRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.StatsVirtioBlkRequest";
  }
  protected:
  explicit StatsVirtioBlkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.StatsVirtioBlkRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_frontend_5fvirtio_5fblk_2eproto;
};
// -------------------------------------------------------------------

class StatsVirtioBlkResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.StatsVirtioBlkResponse) */ {
 public:
  inline StatsVirtioBlkResponse() : StatsVirtioBlkResponse(nullptr) {}
  ~StatsVirtioBlkResponse() override;
  explicit PROTOBUF_CONSTEXPR StatsVirtioBlkResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatsVirtioBlkResponse(const StatsVirtioBlkResponse& from);
  StatsVirtioBlkResponse(StatsVirtioBlkResponse&& from) noexcept
    : StatsVirtioBlkResponse() {
    *this = ::std::move(from);
  }

  inline StatsVirtioBlkResponse& operator=(const StatsVirtioBlkResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatsVirtioBlkResponse& operator=(StatsVirtioBlkResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatsVirtioBlkResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatsVirtioBlkResponse* internal_default_instance() {
    return reinterpret_cast<const StatsVirtioBlkResponse*>(
               &_StatsVirtioBlkResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(StatsVirtioBlkResponse& a, StatsVirtioBlkResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StatsVirtioBlkResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatsVirtioBlkResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatsVirtioBlkResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StatsVirtioBlkResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StatsVirtioBlkResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StatsVirtioBlkResponse& from) {
    StatsVirtioBlkResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatsVirtioBlkResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.StatsVirtioBlkResponse";
  }
  protected:
  explicit StatsVirtioBlkResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 1,
  };
  // .opi_api.storage.v1.VolumeStats stats = 1;
  bool has_stats() const;
  private:
  bool _internal_has_stats() const;
  public:
  void clear_stats();
  const ::opi_api::storage::v1::VolumeStats& stats() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::VolumeStats* release_stats();
  ::opi_api::storage::v1::VolumeStats* mutable_stats();
  void set_allocated_stats(::opi_api::storage::v1::VolumeStats* stats);
  private:
  const ::opi_api::storage::v1::VolumeStats& _internal_stats() const;
  ::opi_api::storage::v1::VolumeStats* _internal_mutable_stats();
  public:
  void unsafe_arena_set_allocated_stats(
      ::opi_api::storage::v1::VolumeStats* stats);
  ::opi_api::storage::v1::VolumeStats* unsafe_arena_release_stats();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.StatsVirtioBlkResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::opi_api::storage::v1::VolumeStats* stats_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_frontend_5fvirtio_5fblk_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VirtioBlk

// string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY, (.google.api.field_behavior) = IMMUTABLE, (.google.api.resource_reference) = {
inline void VirtioBlk::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& VirtioBlk::name() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioBlk.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VirtioBlk::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.VirtioBlk.name)
}
inline std::string* VirtioBlk::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioBlk.name)
  return _s;
}
inline const std::string& VirtioBlk::_internal_name() const {
  return _impl_.name_.Get();
}
inline void VirtioBlk::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* VirtioBlk::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* VirtioBlk::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioBlk.name)
  return _impl_.name_.Release();
}
inline void VirtioBlk::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioBlk.name)
}

// .opi_api.storage.v1.PciEndpoint pcie_id = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool VirtioBlk::_internal_has_pcie_id() const {
  return this != internal_default_instance() && _impl_.pcie_id_ != nullptr;
}
inline bool VirtioBlk::has_pcie_id() const {
  return _internal_has_pcie_id();
}
inline const ::opi_api::storage::v1::PciEndpoint& VirtioBlk::_internal_pcie_id() const {
  const ::opi_api::storage::v1::PciEndpoint* p = _impl_.pcie_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::PciEndpoint&>(
      ::opi_api::storage::v1::_PciEndpoint_default_instance_);
}
inline const ::opi_api::storage::v1::PciEndpoint& VirtioBlk::pcie_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioBlk.pcie_id)
  return _internal_pcie_id();
}
inline void VirtioBlk::unsafe_arena_set_allocated_pcie_id(
    ::opi_api::storage::v1::PciEndpoint* pcie_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pcie_id_);
  }
  _impl_.pcie_id_ = pcie_id;
  if (pcie_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.VirtioBlk.pcie_id)
}
inline ::opi_api::storage::v1::PciEndpoint* VirtioBlk::release_pcie_id() {
  
  ::opi_api::storage::v1::PciEndpoint* temp = _impl_.pcie_id_;
  _impl_.pcie_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::PciEndpoint* VirtioBlk::unsafe_arena_release_pcie_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioBlk.pcie_id)
  
  ::opi_api::storage::v1::PciEndpoint* temp = _impl_.pcie_id_;
  _impl_.pcie_id_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::PciEndpoint* VirtioBlk::_internal_mutable_pcie_id() {
  
  if (_impl_.pcie_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::PciEndpoint>(GetArenaForAllocation());
    _impl_.pcie_id_ = p;
  }
  return _impl_.pcie_id_;
}
inline ::opi_api::storage::v1::PciEndpoint* VirtioBlk::mutable_pcie_id() {
  ::opi_api::storage::v1::PciEndpoint* _msg = _internal_mutable_pcie_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioBlk.pcie_id)
  return _msg;
}
inline void VirtioBlk::set_allocated_pcie_id(::opi_api::storage::v1::PciEndpoint* pcie_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pcie_id_);
  }
  if (pcie_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pcie_id));
    if (message_arena != submessage_arena) {
      pcie_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pcie_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pcie_id_ = pcie_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioBlk.pcie_id)
}

// string volume_name_ref = 3 [(.google.api.field_behavior) = REQUIRED];
inline void VirtioBlk::clear_volume_name_ref() {
  _impl_.volume_name_ref_.ClearToEmpty();
}
inline const std::string& VirtioBlk::volume_name_ref() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioBlk.volume_name_ref)
  return _internal_volume_name_ref();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VirtioBlk::set_volume_name_ref(ArgT0&& arg0, ArgT... args) {
 
 _impl_.volume_name_ref_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.VirtioBlk.volume_name_ref)
}
inline std::string* VirtioBlk::mutable_volume_name_ref() {
  std::string* _s = _internal_mutable_volume_name_ref();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioBlk.volume_name_ref)
  return _s;
}
inline const std::string& VirtioBlk::_internal_volume_name_ref() const {
  return _impl_.volume_name_ref_.Get();
}
inline void VirtioBlk::_internal_set_volume_name_ref(const std::string& value) {
  
  _impl_.volume_name_ref_.Set(value, GetArenaForAllocation());
}
inline std::string* VirtioBlk::_internal_mutable_volume_name_ref() {
  
  return _impl_.volume_name_ref_.Mutable(GetArenaForAllocation());
}
inline std::string* VirtioBlk::release_volume_name_ref() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioBlk.volume_name_ref)
  return _impl_.volume_name_ref_.Release();
}
inline void VirtioBlk::set_allocated_volume_name_ref(std::string* volume_name_ref) {
  if (volume_name_ref != nullptr) {
    
  } else {
    
  }
  _impl_.volume_name_ref_.SetAllocated(volume_name_ref, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.volume_name_ref_.IsDefault()) {
    _impl_.volume_name_ref_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioBlk.volume_name_ref)
}

// int64 max_io_qps = 4 [(.google.api.field_behavior) = OPTIONAL];
inline void VirtioBlk::clear_max_io_qps() {
  _impl_.max_io_qps_ = int64_t{0};
}
inline int64_t VirtioBlk::_internal_max_io_qps() const {
  return _impl_.max_io_qps_;
}
inline int64_t VirtioBlk::max_io_qps() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioBlk.max_io_qps)
  return _internal_max_io_qps();
}
inline void VirtioBlk::_internal_set_max_io_qps(int64_t value) {
  
  _impl_.max_io_qps_ = value;
}
inline void VirtioBlk::set_max_io_qps(int64_t value) {
  _internal_set_max_io_qps(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.VirtioBlk.max_io_qps)
}

// .opi_api.storage.v1.QosLimit min_limit = 5 [(.google.api.field_behavior) = OPTIONAL];
inline bool VirtioBlk::_internal_has_min_limit() const {
  return this != internal_default_instance() && _impl_.min_limit_ != nullptr;
}
inline bool VirtioBlk::has_min_limit() const {
  return _internal_has_min_limit();
}
inline const ::opi_api::storage::v1::QosLimit& VirtioBlk::_internal_min_limit() const {
  const ::opi_api::storage::v1::QosLimit* p = _impl_.min_limit_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::QosLimit&>(
      ::opi_api::storage::v1::_QosLimit_default_instance_);
}
inline const ::opi_api::storage::v1::QosLimit& VirtioBlk::min_limit() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioBlk.min_limit)
  return _internal_min_limit();
}
inline void VirtioBlk::unsafe_arena_set_allocated_min_limit(
    ::opi_api::storage::v1::QosLimit* min_limit) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.min_limit_);
  }
  _impl_.min_limit_ = min_limit;
  if (min_limit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.VirtioBlk.min_limit)
}
inline ::opi_api::storage::v1::QosLimit* VirtioBlk::release_min_limit() {
  
  ::opi_api::storage::v1::QosLimit* temp = _impl_.min_limit_;
  _impl_.min_limit_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::QosLimit* VirtioBlk::unsafe_arena_release_min_limit() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioBlk.min_limit)
  
  ::opi_api::storage::v1::QosLimit* temp = _impl_.min_limit_;
  _impl_.min_limit_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::QosLimit* VirtioBlk::_internal_mutable_min_limit() {
  
  if (_impl_.min_limit_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::QosLimit>(GetArenaForAllocation());
    _impl_.min_limit_ = p;
  }
  return _impl_.min_limit_;
}
inline ::opi_api::storage::v1::QosLimit* VirtioBlk::mutable_min_limit() {
  ::opi_api::storage::v1::QosLimit* _msg = _internal_mutable_min_limit();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioBlk.min_limit)
  return _msg;
}
inline void VirtioBlk::set_allocated_min_limit(::opi_api::storage::v1::QosLimit* min_limit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.min_limit_);
  }
  if (min_limit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_limit));
    if (message_arena != submessage_arena) {
      min_limit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min_limit, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.min_limit_ = min_limit;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioBlk.min_limit)
}

// .opi_api.storage.v1.QosLimit max_limit = 6 [(.google.api.field_behavior) = OPTIONAL];
inline bool VirtioBlk::_internal_has_max_limit() const {
  return this != internal_default_instance() && _impl_.max_limit_ != nullptr;
}
inline bool VirtioBlk::has_max_limit() const {
  return _internal_has_max_limit();
}
inline const ::opi_api::storage::v1::QosLimit& VirtioBlk::_internal_max_limit() const {
  const ::opi_api::storage::v1::QosLimit* p = _impl_.max_limit_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::QosLimit&>(
      ::opi_api::storage::v1::_QosLimit_default_instance_);
}
inline const ::opi_api::storage::v1::QosLimit& VirtioBlk::max_limit() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioBlk.max_limit)
  return _internal_max_limit();
}
inline void VirtioBlk::unsafe_arena_set_allocated_max_limit(
    ::opi_api::storage::v1::QosLimit* max_limit) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_limit_);
  }
  _impl_.max_limit_ = max_limit;
  if (max_limit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.VirtioBlk.max_limit)
}
inline ::opi_api::storage::v1::QosLimit* VirtioBlk::release_max_limit() {
  
  ::opi_api::storage::v1::QosLimit* temp = _impl_.max_limit_;
  _impl_.max_limit_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::QosLimit* VirtioBlk::unsafe_arena_release_max_limit() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioBlk.max_limit)
  
  ::opi_api::storage::v1::QosLimit* temp = _impl_.max_limit_;
  _impl_.max_limit_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::QosLimit* VirtioBlk::_internal_mutable_max_limit() {
  
  if (_impl_.max_limit_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::QosLimit>(GetArenaForAllocation());
    _impl_.max_limit_ = p;
  }
  return _impl_.max_limit_;
}
inline ::opi_api::storage::v1::QosLimit* VirtioBlk::mutable_max_limit() {
  ::opi_api::storage::v1::QosLimit* _msg = _internal_mutable_max_limit();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioBlk.max_limit)
  return _msg;
}
inline void VirtioBlk::set_allocated_max_limit(::opi_api::storage::v1::QosLimit* max_limit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_limit_);
  }
  if (max_limit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_limit));
    if (message_arena != submessage_arena) {
      max_limit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_limit, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.max_limit_ = max_limit;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioBlk.max_limit)
}

// -------------------------------------------------------------------

// CreateVirtioBlkRequest

// .opi_api.storage.v1.VirtioBlk virtio_blk = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateVirtioBlkRequest::_internal_has_virtio_blk() const {
  return this != internal_default_instance() && _impl_.virtio_blk_ != nullptr;
}
inline bool CreateVirtioBlkRequest::has_virtio_blk() const {
  return _internal_has_virtio_blk();
}
inline void CreateVirtioBlkRequest::clear_virtio_blk() {
  if (GetArenaForAllocation() == nullptr && _impl_.virtio_blk_ != nullptr) {
    delete _impl_.virtio_blk_;
  }
  _impl_.virtio_blk_ = nullptr;
}
inline const ::opi_api::storage::v1::VirtioBlk& CreateVirtioBlkRequest::_internal_virtio_blk() const {
  const ::opi_api::storage::v1::VirtioBlk* p = _impl_.virtio_blk_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::VirtioBlk&>(
      ::opi_api::storage::v1::_VirtioBlk_default_instance_);
}
inline const ::opi_api::storage::v1::VirtioBlk& CreateVirtioBlkRequest::virtio_blk() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.CreateVirtioBlkRequest.virtio_blk)
  return _internal_virtio_blk();
}
inline void CreateVirtioBlkRequest::unsafe_arena_set_allocated_virtio_blk(
    ::opi_api::storage::v1::VirtioBlk* virtio_blk) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.virtio_blk_);
  }
  _impl_.virtio_blk_ = virtio_blk;
  if (virtio_blk) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.CreateVirtioBlkRequest.virtio_blk)
}
inline ::opi_api::storage::v1::VirtioBlk* CreateVirtioBlkRequest::release_virtio_blk() {
  
  ::opi_api::storage::v1::VirtioBlk* temp = _impl_.virtio_blk_;
  _impl_.virtio_blk_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::VirtioBlk* CreateVirtioBlkRequest::unsafe_arena_release_virtio_blk() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.CreateVirtioBlkRequest.virtio_blk)
  
  ::opi_api::storage::v1::VirtioBlk* temp = _impl_.virtio_blk_;
  _impl_.virtio_blk_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::VirtioBlk* CreateVirtioBlkRequest::_internal_mutable_virtio_blk() {
  
  if (_impl_.virtio_blk_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::VirtioBlk>(GetArenaForAllocation());
    _impl_.virtio_blk_ = p;
  }
  return _impl_.virtio_blk_;
}
inline ::opi_api::storage::v1::VirtioBlk* CreateVirtioBlkRequest::mutable_virtio_blk() {
  ::opi_api::storage::v1::VirtioBlk* _msg = _internal_mutable_virtio_blk();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.CreateVirtioBlkRequest.virtio_blk)
  return _msg;
}
inline void CreateVirtioBlkRequest::set_allocated_virtio_blk(::opi_api::storage::v1::VirtioBlk* virtio_blk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.virtio_blk_;
  }
  if (virtio_blk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(virtio_blk);
    if (message_arena != submessage_arena) {
      virtio_blk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, virtio_blk, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.virtio_blk_ = virtio_blk;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.CreateVirtioBlkRequest.virtio_blk)
}

// string virtio_blk_id = 2 [(.google.api.field_behavior) = OPTIONAL];
inline void CreateVirtioBlkRequest::clear_virtio_blk_id() {
  _impl_.virtio_blk_id_.ClearToEmpty();
}
inline const std::string& CreateVirtioBlkRequest::virtio_blk_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.CreateVirtioBlkRequest.virtio_blk_id)
  return _internal_virtio_blk_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateVirtioBlkRequest::set_virtio_blk_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.virtio_blk_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.CreateVirtioBlkRequest.virtio_blk_id)
}
inline std::string* CreateVirtioBlkRequest::mutable_virtio_blk_id() {
  std::string* _s = _internal_mutable_virtio_blk_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.CreateVirtioBlkRequest.virtio_blk_id)
  return _s;
}
inline const std::string& CreateVirtioBlkRequest::_internal_virtio_blk_id() const {
  return _impl_.virtio_blk_id_.Get();
}
inline void CreateVirtioBlkRequest::_internal_set_virtio_blk_id(const std::string& value) {
  
  _impl_.virtio_blk_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateVirtioBlkRequest::_internal_mutable_virtio_blk_id() {
  
  return _impl_.virtio_blk_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateVirtioBlkRequest::release_virtio_blk_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.CreateVirtioBlkRequest.virtio_blk_id)
  return _impl_.virtio_blk_id_.Release();
}
inline void CreateVirtioBlkRequest::set_allocated_virtio_blk_id(std::string* virtio_blk_id) {
  if (virtio_blk_id != nullptr) {
    
  } else {
    
  }
  _impl_.virtio_blk_id_.SetAllocated(virtio_blk_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.virtio_blk_id_.IsDefault()) {
    _impl_.virtio_blk_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.CreateVirtioBlkRequest.virtio_blk_id)
}

// -------------------------------------------------------------------

// DeleteVirtioBlkRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteVirtioBlkRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DeleteVirtioBlkRequest::name() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.DeleteVirtioBlkRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteVirtioBlkRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.DeleteVirtioBlkRequest.name)
}
inline std::string* DeleteVirtioBlkRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.DeleteVirtioBlkRequest.name)
  return _s;
}
inline const std::string& DeleteVirtioBlkRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DeleteVirtioBlkRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteVirtioBlkRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteVirtioBlkRequest::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.DeleteVirtioBlkRequest.name)
  return _impl_.name_.Release();
}
inline void DeleteVirtioBlkRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.DeleteVirtioBlkRequest.name)
}

// bool allow_missing = 2 [(.google.api.field_behavior) = OPTIONAL];
inline void DeleteVirtioBlkRequest::clear_allow_missing() {
  _impl_.allow_missing_ = false;
}
inline bool DeleteVirtioBlkRequest::_internal_allow_missing() const {
  return _impl_.allow_missing_;
}
inline bool DeleteVirtioBlkRequest::allow_missing() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.DeleteVirtioBlkRequest.allow_missing)
  return _internal_allow_missing();
}
inline void DeleteVirtioBlkRequest::_internal_set_allow_missing(bool value) {
  
  _impl_.allow_missing_ = value;
}
inline void DeleteVirtioBlkRequest::set_allow_missing(bool value) {
  _internal_set_allow_missing(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.DeleteVirtioBlkRequest.allow_missing)
}

// -------------------------------------------------------------------

// UpdateVirtioBlkRequest

// .opi_api.storage.v1.VirtioBlk virtio_blk = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateVirtioBlkRequest::_internal_has_virtio_blk() const {
  return this != internal_default_instance() && _impl_.virtio_blk_ != nullptr;
}
inline bool UpdateVirtioBlkRequest::has_virtio_blk() const {
  return _internal_has_virtio_blk();
}
inline void UpdateVirtioBlkRequest::clear_virtio_blk() {
  if (GetArenaForAllocation() == nullptr && _impl_.virtio_blk_ != nullptr) {
    delete _impl_.virtio_blk_;
  }
  _impl_.virtio_blk_ = nullptr;
}
inline const ::opi_api::storage::v1::VirtioBlk& UpdateVirtioBlkRequest::_internal_virtio_blk() const {
  const ::opi_api::storage::v1::VirtioBlk* p = _impl_.virtio_blk_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::VirtioBlk&>(
      ::opi_api::storage::v1::_VirtioBlk_default_instance_);
}
inline const ::opi_api::storage::v1::VirtioBlk& UpdateVirtioBlkRequest::virtio_blk() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.UpdateVirtioBlkRequest.virtio_blk)
  return _internal_virtio_blk();
}
inline void UpdateVirtioBlkRequest::unsafe_arena_set_allocated_virtio_blk(
    ::opi_api::storage::v1::VirtioBlk* virtio_blk) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.virtio_blk_);
  }
  _impl_.virtio_blk_ = virtio_blk;
  if (virtio_blk) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.UpdateVirtioBlkRequest.virtio_blk)
}
inline ::opi_api::storage::v1::VirtioBlk* UpdateVirtioBlkRequest::release_virtio_blk() {
  
  ::opi_api::storage::v1::VirtioBlk* temp = _impl_.virtio_blk_;
  _impl_.virtio_blk_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::VirtioBlk* UpdateVirtioBlkRequest::unsafe_arena_release_virtio_blk() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.UpdateVirtioBlkRequest.virtio_blk)
  
  ::opi_api::storage::v1::VirtioBlk* temp = _impl_.virtio_blk_;
  _impl_.virtio_blk_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::VirtioBlk* UpdateVirtioBlkRequest::_internal_mutable_virtio_blk() {
  
  if (_impl_.virtio_blk_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::VirtioBlk>(GetArenaForAllocation());
    _impl_.virtio_blk_ = p;
  }
  return _impl_.virtio_blk_;
}
inline ::opi_api::storage::v1::VirtioBlk* UpdateVirtioBlkRequest::mutable_virtio_blk() {
  ::opi_api::storage::v1::VirtioBlk* _msg = _internal_mutable_virtio_blk();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.UpdateVirtioBlkRequest.virtio_blk)
  return _msg;
}
inline void UpdateVirtioBlkRequest::set_allocated_virtio_blk(::opi_api::storage::v1::VirtioBlk* virtio_blk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.virtio_blk_;
  }
  if (virtio_blk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(virtio_blk);
    if (message_arena != submessage_arena) {
      virtio_blk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, virtio_blk, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.virtio_blk_ = virtio_blk;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.UpdateVirtioBlkRequest.virtio_blk)
}

// .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = OPTIONAL];
inline bool UpdateVirtioBlkRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && _impl_.update_mask_ != nullptr;
}
inline bool UpdateVirtioBlkRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateVirtioBlkRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateVirtioBlkRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.UpdateVirtioBlkRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateVirtioBlkRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  _impl_.update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.UpdateVirtioBlkRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateVirtioBlkRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateVirtioBlkRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.UpdateVirtioBlkRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateVirtioBlkRequest::_internal_mutable_update_mask() {
  
  if (_impl_.update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.update_mask_ = p;
  }
  return _impl_.update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateVirtioBlkRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.UpdateVirtioBlkRequest.update_mask)
  return _msg;
}
inline void UpdateVirtioBlkRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.UpdateVirtioBlkRequest.update_mask)
}

// bool allow_missing = 3 [(.google.api.field_behavior) = OPTIONAL];
inline void UpdateVirtioBlkRequest::clear_allow_missing() {
  _impl_.allow_missing_ = false;
}
inline bool UpdateVirtioBlkRequest::_internal_allow_missing() const {
  return _impl_.allow_missing_;
}
inline bool UpdateVirtioBlkRequest::allow_missing() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.UpdateVirtioBlkRequest.allow_missing)
  return _internal_allow_missing();
}
inline void UpdateVirtioBlkRequest::_internal_set_allow_missing(bool value) {
  
  _impl_.allow_missing_ = value;
}
inline void UpdateVirtioBlkRequest::set_allow_missing(bool value) {
  _internal_set_allow_missing(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.UpdateVirtioBlkRequest.allow_missing)
}

// -------------------------------------------------------------------

// ListVirtioBlksRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListVirtioBlksRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ListVirtioBlksRequest::parent() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListVirtioBlksRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListVirtioBlksRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.ListVirtioBlksRequest.parent)
}
inline std::string* ListVirtioBlksRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.ListVirtioBlksRequest.parent)
  return _s;
}
inline const std::string& ListVirtioBlksRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void ListVirtioBlksRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* ListVirtioBlksRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* ListVirtioBlksRequest::release_parent() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.ListVirtioBlksRequest.parent)
  return _impl_.parent_.Release();
}
inline void ListVirtioBlksRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.ListVirtioBlksRequest.parent)
}

// int32 page_size = 2 [(.google.api.field_behavior) = OPTIONAL];
inline void ListVirtioBlksRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListVirtioBlksRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListVirtioBlksRequest::page_size() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListVirtioBlksRequest.page_size)
  return _internal_page_size();
}
inline void ListVirtioBlksRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListVirtioBlksRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.ListVirtioBlksRequest.page_size)
}

// string page_token = 3 [(.google.api.field_behavior) = OPTIONAL];
inline void ListVirtioBlksRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListVirtioBlksRequest::page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListVirtioBlksRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListVirtioBlksRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.ListVirtioBlksRequest.page_token)
}
inline std::string* ListVirtioBlksRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.ListVirtioBlksRequest.page_token)
  return _s;
}
inline const std::string& ListVirtioBlksRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListVirtioBlksRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListVirtioBlksRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListVirtioBlksRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.ListVirtioBlksRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListVirtioBlksRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.ListVirtioBlksRequest.page_token)
}

// -------------------------------------------------------------------

// ListVirtioBlksResponse

// repeated .opi_api.storage.v1.VirtioBlk virtio_blks = 1;
inline int ListVirtioBlksResponse::_internal_virtio_blks_size() const {
  return _impl_.virtio_blks_.size();
}
inline int ListVirtioBlksResponse::virtio_blks_size() const {
  return _internal_virtio_blks_size();
}
inline void ListVirtioBlksResponse::clear_virtio_blks() {
  _impl_.virtio_blks_.Clear();
}
inline ::opi_api::storage::v1::VirtioBlk* ListVirtioBlksResponse::mutable_virtio_blks(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.ListVirtioBlksResponse.virtio_blks)
  return _impl_.virtio_blks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::VirtioBlk >*
ListVirtioBlksResponse::mutable_virtio_blks() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.storage.v1.ListVirtioBlksResponse.virtio_blks)
  return &_impl_.virtio_blks_;
}
inline const ::opi_api::storage::v1::VirtioBlk& ListVirtioBlksResponse::_internal_virtio_blks(int index) const {
  return _impl_.virtio_blks_.Get(index);
}
inline const ::opi_api::storage::v1::VirtioBlk& ListVirtioBlksResponse::virtio_blks(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListVirtioBlksResponse.virtio_blks)
  return _internal_virtio_blks(index);
}
inline ::opi_api::storage::v1::VirtioBlk* ListVirtioBlksResponse::_internal_add_virtio_blks() {
  return _impl_.virtio_blks_.Add();
}
inline ::opi_api::storage::v1::VirtioBlk* ListVirtioBlksResponse::add_virtio_blks() {
  ::opi_api::storage::v1::VirtioBlk* _add = _internal_add_virtio_blks();
  // @@protoc_insertion_point(field_add:opi_api.storage.v1.ListVirtioBlksResponse.virtio_blks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::VirtioBlk >&
ListVirtioBlksResponse::virtio_blks() const {
  // @@protoc_insertion_point(field_list:opi_api.storage.v1.ListVirtioBlksResponse.virtio_blks)
  return _impl_.virtio_blks_;
}

// string next_page_token = 2;
inline void ListVirtioBlksResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListVirtioBlksResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListVirtioBlksResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListVirtioBlksResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.ListVirtioBlksResponse.next_page_token)
}
inline std::string* ListVirtioBlksResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.ListVirtioBlksResponse.next_page_token)
  return _s;
}
inline const std::string& ListVirtioBlksResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListVirtioBlksResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListVirtioBlksResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListVirtioBlksResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.ListVirtioBlksResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListVirtioBlksResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.ListVirtioBlksResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetVirtioBlkRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetVirtioBlkRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetVirtioBlkRequest::name() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.GetVirtioBlkRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetVirtioBlkRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.GetVirtioBlkRequest.name)
}
inline std::string* GetVirtioBlkRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.GetVirtioBlkRequest.name)
  return _s;
}
inline const std::string& GetVirtioBlkRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetVirtioBlkRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetVirtioBlkRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetVirtioBlkRequest::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.GetVirtioBlkRequest.name)
  return _impl_.name_.Release();
}
inline void GetVirtioBlkRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.GetVirtioBlkRequest.name)
}

// -------------------------------------------------------------------

// StatsVirtioBlkRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void StatsVirtioBlkRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& StatsVirtioBlkRequest::name() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.StatsVirtioBlkRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StatsVirtioBlkRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.StatsVirtioBlkRequest.name)
}
inline std::string* StatsVirtioBlkRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.StatsVirtioBlkRequest.name)
  return _s;
}
inline const std::string& StatsVirtioBlkRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void StatsVirtioBlkRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* StatsVirtioBlkRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* StatsVirtioBlkRequest::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.StatsVirtioBlkRequest.name)
  return _impl_.name_.Release();
}
inline void StatsVirtioBlkRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.StatsVirtioBlkRequest.name)
}

// -------------------------------------------------------------------

// StatsVirtioBlkResponse

// .opi_api.storage.v1.VolumeStats stats = 1;
inline bool StatsVirtioBlkResponse::_internal_has_stats() const {
  return this != internal_default_instance() && _impl_.stats_ != nullptr;
}
inline bool StatsVirtioBlkResponse::has_stats() const {
  return _internal_has_stats();
}
inline const ::opi_api::storage::v1::VolumeStats& StatsVirtioBlkResponse::_internal_stats() const {
  const ::opi_api::storage::v1::VolumeStats* p = _impl_.stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::VolumeStats&>(
      ::opi_api::storage::v1::_VolumeStats_default_instance_);
}
inline const ::opi_api::storage::v1::VolumeStats& StatsVirtioBlkResponse::stats() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.StatsVirtioBlkResponse.stats)
  return _internal_stats();
}
inline void StatsVirtioBlkResponse::unsafe_arena_set_allocated_stats(
    ::opi_api::storage::v1::VolumeStats* stats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stats_);
  }
  _impl_.stats_ = stats;
  if (stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.StatsVirtioBlkResponse.stats)
}
inline ::opi_api::storage::v1::VolumeStats* StatsVirtioBlkResponse::release_stats() {
  
  ::opi_api::storage::v1::VolumeStats* temp = _impl_.stats_;
  _impl_.stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::VolumeStats* StatsVirtioBlkResponse::unsafe_arena_release_stats() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.StatsVirtioBlkResponse.stats)
  
  ::opi_api::storage::v1::VolumeStats* temp = _impl_.stats_;
  _impl_.stats_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::VolumeStats* StatsVirtioBlkResponse::_internal_mutable_stats() {
  
  if (_impl_.stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::VolumeStats>(GetArenaForAllocation());
    _impl_.stats_ = p;
  }
  return _impl_.stats_;
}
inline ::opi_api::storage::v1::VolumeStats* StatsVirtioBlkResponse::mutable_stats() {
  ::opi_api::storage::v1::VolumeStats* _msg = _internal_mutable_stats();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.StatsVirtioBlkResponse.stats)
  return _msg;
}
inline void StatsVirtioBlkResponse::set_allocated_stats(::opi_api::storage::v1::VolumeStats* stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stats_);
  }
  if (stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stats));
    if (message_arena != submessage_arena) {
      stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stats, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.stats_ = stats;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.StatsVirtioBlkResponse.stats)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace storage
}  // namespace opi_api

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frontend_5fvirtio_5fblk_2eproto
